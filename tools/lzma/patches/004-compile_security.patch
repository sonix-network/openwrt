diff -ur lzma-4.65.orig/C/LzmaUtil/LzmaUtil.c lzma-4.65.patch/C/LzmaUtil/LzmaUtil.c
--- lzma-4.65.orig/C/LzmaUtil/LzmaUtil.c	2009-05-15 23:33:50.000000000 +0200
+++ lzma-4.65.patch/C/LzmaUtil/LzmaUtil.c	2023-06-16 22:19:28.195492880 +0200
@@ -249,6 +249,6 @@
 {
   char rs[800] = { 0 };
   int res = main2(numArgs, args, rs);
-  printf(rs);
+  puts(rs);
   return res;
 }
diff -ur lzma-4.65.orig/CPP/7zip/Compress/LZMA_Alone/LzmaAlone.cpp lzma-4.65.patch/CPP/7zip/Compress/LZMA_Alone/LzmaAlone.cpp
--- lzma-4.65.orig/CPP/7zip/Compress/LZMA_Alone/LzmaAlone.cpp	2009-05-15 23:33:51.000000000 +0200
+++ lzma-4.65.patch/CPP/7zip/Compress/LZMA_Alone/LzmaAlone.cpp	2023-06-16 22:18:46.068616947 +0200
@@ -464,7 +464,7 @@
       Byte b = Byte(fileSize >> (8 * i));
       if (outStream->Write(&b, 1, 0) != S_OK)
       {
-        fprintf(stderr, kWriteError);
+        fputs(kWriteError, stderr);
         return 1;
       }
     }
@@ -489,7 +489,7 @@
     Byte header[kPropertiesSize + 8];
     if (ReadStream_FALSE(inStream, header, kPropertiesSize + 8) != S_OK)
     {
-      fprintf(stderr, kReadError);
+      fputs(kReadError, stderr);
       return 1;
     }
     if (decoderSpec->SetDecoderProperties2(header, kPropertiesSize) != S_OK)
diff -ur lzma-4.65.orig/CPP/7zip/Compress/LZMA_Alone/LzmaBenchCon.cpp lzma-4.65.patch/CPP/7zip/Compress/LZMA_Alone/LzmaBenchCon.cpp
--- lzma-4.65.orig/CPP/7zip/Compress/LZMA_Alone/LzmaBenchCon.cpp	2009-05-15 23:33:51.000000000 +0200
+++ lzma-4.65.patch/CPP/7zip/Compress/LZMA_Alone/LzmaBenchCon.cpp	2023-06-16 22:26:45.481205408 +0200
@@ -142,7 +142,7 @@
   if (final)
   {
     UInt64 rating = GetDecompressRating(info.GlobalTime, info.GlobalFreq, info.UnpackSize, info.PackSize, info.NumIterations);
-    fprintf(f, kSep);
+    fputs(kSep, f);
     CBenchInfo info2 = info;
     info2.UnpackSize *= info2.NumIterations;
     info2.PackSize *= info2.NumIterations;
@@ -201,14 +201,14 @@
   {
     fprintf(f, "   Speed Usage    R/U Rating");
     if (j == 0)
-      fprintf(f, kSep);
+      fputs(kSep, f);
   }
   fprintf(f, "\n   ");
   for (j = 0; j < 2; j++)
   {
     fprintf(f, "    KB/s     %%   MIPS   MIPS");
     if (j == 0)
-      fprintf(f, kSep);
+      fputs(kSep, f);
   }
   fprintf(f, "\n\n");
   for (UInt32 i = 0; i < numIterations; i++)
