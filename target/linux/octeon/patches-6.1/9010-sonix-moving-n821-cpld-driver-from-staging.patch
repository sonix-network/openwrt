From c5daed4bac5b1abd37489620f383da45a225ae25 Mon Sep 17 00:00:00 2001
From: Tommy Nevtelen <tommy@nevtelen.com>
Date: Mon, 10 Jul 2023 20:19:34 +0200
Subject: [PATCH] sonix: moving n821 cpld driver from staging

---
 drivers/mfd/Kconfig                 |  12 +++
 drivers/mfd/Makefile                |   3 +
 drivers/mfd/cisco-n821-cpld.c       | 150 ++++++++++++++++++++++++++++
 include/linux/mfd/cisco-n821-cpld.h |  37 +++++++
 4 files changed, 202 insertions(+)
 create mode 100644 drivers/mfd/cisco-n821-cpld.c
 create mode 100644 include/linux/mfd/cisco-n821-cpld.h

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index ef550d33af92..fcf8baf880fc 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -143,6 +143,18 @@ config MFD_ATMEL_HLCDC
 	  additional drivers must be enabled in order to use the
 	  functionality of the device.
 
+config CISCO_N821_CPLD
+	tristate "Cisco 821 CPLD support"
+	depends on CAVIUM_OCTEON_SOC || COMPILE_TEST
+	select MFD_CORE
+	select MFD_SYSCON
+	select REGMAP_IRQ
+	help
+	  If you select Y here you get support for the Cisco N821 CPLD.
+
+	  To compile this driver as a module, choose M here.  The module
+	  will be called cisco-n821-cpld.
+
 config MFD_ATMEL_SMC
 	bool
 	select MFD_SYSCON
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index 2ba6646e874c..4efac062143d 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -278,3 +278,6 @@ rsmu-i2c-objs			:= rsmu_core.o rsmu_i2c.o
 rsmu-spi-objs			:= rsmu_core.o rsmu_spi.o
 obj-$(CONFIG_MFD_RSMU_I2C)	+= rsmu-i2c.o
 obj-$(CONFIG_MFD_RSMU_SPI)	+= rsmu-spi.o
+
+obj-$(CONFIG_CISCO_N821_CPLD)  += cisco-n821-cpld.o
+cisco-n821-cpld-objs  := cpld_core.o
diff --git a/drivers/mfd/cisco-n821-cpld.c b/drivers/mfd/cisco-n821-cpld.c
new file mode 100644
index 000000000000..80fd678d4ab2
--- /dev/null
+++ b/drivers/mfd/cisco-n821-cpld.c
@@ -0,0 +1,150 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * CPLD driver for Niagara 821 board used in Cisco vEdge 1000.
+ *
+ * Author: Christian Svensson <blue@cmd.nu>
+ */
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/mfd/core.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/printk.h>
+#include <linux/mfd/cisco-n821-cpld.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
+
+
+struct n821_cpld_data {
+  struct device *dev;
+  struct regmap_irq_chip_data *irqdata;
+};
+
+static const struct regmap_irq n821_cpld_irq_map[] = {
+  REGMAP_IRQ_REG(N821_CPLD_IRQ_I2C, 0, N821_CPLD_INT_IRQ_I2C),
+  REGMAP_IRQ_REG(N821_CPLD_IRQ_RESET_BTN, 0, N821_CPLD_INT_IRQ_RESET_BTN),
+  REGMAP_IRQ_REG(N821_CPLD_IRQ_OVERTEMP, 0, N821_CPLD_INT_IRQ_OVERTEMP),
+};
+
+static const struct regmap_irq_chip n821_cpld_irq_chip = {
+  .name            = "n821-cpld-ic",
+  .status_base     = N821_CPLD_REG_IRQ_STATUS,
+  .mask_base       = N821_CPLD_REG_IRQ_MASK,
+  .ack_base        = N821_CPLD_REG_IRQ_STATUS,
+  .mask_invert     = true,
+  .num_regs        = 1,
+  .init_ack_masked = 1,
+  .irqs            = n821_cpld_irq_map,
+  .num_irqs        = ARRAY_SIZE(n821_cpld_irq_map),
+};
+
+static ssize_t
+cpld_rev_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+  struct regmap *regmap = syscon_node_to_regmap(dev->of_node);
+  int rev = 0;
+  int ret = regmap_read(regmap, N821_CPLD_REG_REVISION, &rev);
+  if (ret < 0) {
+    return ret;
+  }
+  return snprintf(buf, PAGE_SIZE, "%d\n", rev & 0xf);
+}
+
+static DEVICE_ATTR_RO(cpld_rev);
+
+static struct attribute *n821_cpld_attrs[] = {
+  &dev_attr_cpld_rev.attr,
+  NULL
+};
+
+static struct attribute_group n821_cpld_group = {
+      .attrs = n821_cpld_attrs,
+};
+
+static void n821_cpld_enable_usb3(struct device *dev)
+{
+  // Ensure USB3 is enabled
+  struct regmap *regmap = syscon_node_to_regmap(dev->of_node);
+  regmap_write(regmap, N821_CPLD_REG_USB3_RST, 0);
+}
+
+static int n821_cpld_probe(struct platform_device *pdev)
+{
+  struct device *dev = &pdev->dev;
+  struct regmap *regmap;
+  struct n821_cpld_data *drvdata;
+  int irq;
+  int ret;
+
+  regmap = syscon_node_to_regmap(dev->of_node);
+  if (IS_ERR(regmap)) {
+    dev_info(dev, "cannot get regmap, try again later\n");
+    return -EPROBE_DEFER;
+  }
+
+  irq = irq_of_parse_and_map(dev->of_node, 0);
+  if (!irq) {
+    dev_err(dev, "no IRQ found\n");
+    return -ENODEV;
+  }
+
+  drvdata = devm_kzalloc(dev, sizeof(struct n821_cpld_data), GFP_KERNEL);
+  if (drvdata == NULL) {
+    return -ENOMEM;
+  }
+  drvdata->dev = dev;
+  drvdata->irqdata = NULL;
+  dev_set_drvdata(dev, drvdata);
+
+  ret = devm_regmap_add_irq_chip_fwnode(dev, dev_fwnode(dev), regmap, irq, IRQF_ONESHOT, 0, &n821_cpld_irq_chip, &drvdata->irqdata);
+  if (ret) {
+    dev_err(dev, "failed to add IRQ chip: %d\n", ret);
+    return ret;
+  }
+
+  dev_info(dev, "probed");
+
+  ret = devm_of_platform_populate(dev);
+  if (ret) {
+    dev_err(dev, "populate platform failed: %d\n", ret);
+    return ret;
+  }
+
+  n821_cpld_enable_usb3(dev);
+  return devm_device_add_group(dev, &n821_cpld_group);
+}
+
+static int n821_cpld_remove(struct platform_device *pdev)
+{
+  return 0;
+}
+
+
+static struct of_device_id n821_cpld_match_table[] = {
+  { .compatible = "cisco,n821-cpld" },
+  { }
+};
+
+
+static struct platform_driver n821_cpld_platform_driver = {
+  .probe = n821_cpld_probe,
+  .remove = n821_cpld_remove,
+  .driver = {
+    .name = "n821-cpld",
+    .owner = THIS_MODULE,
+    .of_match_table = of_match_ptr(n821_cpld_match_table),
+  },
+};
+
+module_platform_driver(n821_cpld_platform_driver);
+
+MODULE_DEVICE_TABLE(of, n821_cpld_match_table);
+MODULE_DESCRIPTION("Niagara 821 CPLD driver");
+MODULE_AUTHOR("Christian Svensson <blue@cmd.nu>");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/mfd/cisco-n821-cpld.h b/include/linux/mfd/cisco-n821-cpld.h
new file mode 100644
index 000000000000..eb8fa490e694
--- /dev/null
+++ b/include/linux/mfd/cisco-n821-cpld.h
@@ -0,0 +1,37 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * cpld.c - Interface Masters CPLD module for Niagara 821
+ * CPLD driver for Niagara 821 board used in Cisco vEdge 1000.
+ *
+ * Author: Christian Svensson <blue@cmd.nu>
+ */
+
+#ifndef __HEADER__CPLD__
+#define __HEADER__CPLD__
+
+#include <linux/regmap.h>
+
+#define CISCO_N821_CPLD_INT_IRQ_I2C       BIT(3)
+#define CISCO_N821_CPLD_INT_IRQ_RESET_BTN BIT(6)
+#define CISCO_N821_CPLD_INT_IRQ_OVERTEMP  BIT(7)
+
+#define CISCO_N821_CPLD_REG_REVISION    0x2
+#define CISCO_N821_CPLD_REG_PWR_CTRL    0x3
+#define CISCO_N821_CPLD_REG_USB3_RST    0x4
+#define CISCO_N821_CPLD_REG_PWR_STATUS  0x6
+#define CISCO_N821_CPLD_REG_FAN0_SPEED  0x7
+#define CISCO_N821_CPLD_REG_FAN1_SPEED  0x8
+#define CISCO_N821_CPLD_REG_SFP_PRSNT   0x0B
+#define CISCO_N821_CPLD_REG_IRQ_STATUS  0x10
+#define CISCO_N821_CPLD_REG_IRQ_MASK    0x11
+#define CISCO_N821_CPLD_REG_PWR_TEST    0x20
+
+#define CISCO_N821_CPLD_I2C_REG_CTRL    0x2
+
+enum cisco_n821_cpld_irqs {
+  CISCO_N821_CPLD_IRQ_I2C,
+  CISCO_N821_CPLD_IRQ_RESET_BTN,
+  CISCO_N821_CPLD_IRQ_OVERTEMP,
+};
+
+#endif
-- 
2.39.3

